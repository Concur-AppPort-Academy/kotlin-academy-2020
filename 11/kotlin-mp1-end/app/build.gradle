//plugins{
//    id 'org.jetbrains.kotlin.multiplatform'
//}

apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    packagingOptions {
        exclude 'META-INF/ktor-client-serialization.kotlin_module'
        exclude 'META-INF/ktor-http.kotlin_module'
        exclude 'META-INF/ktor-utils.kotlin_module'
        exclude 'META-INF/kotlinx-serialization-runtime.kotlin_module'
        exclude 'META-INF/ktor-io.kotlin_module'
        exclude 'META-INF/ktor-http-cio.kotlin_module'
        exclude 'META-INF/ktor-client-json.kotlin_module'
        exclude 'META-INF/ktor-client-logging.kotlin_module'
        exclude 'META-INF/ktor-client-core.kotlin_module'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {
    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device


    iosX64("ios") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')

                //Coroutines
                api("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version")

                //serialization
                api("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version")

                //ktor
                api("io.ktor:ktor-client-core:$ktor_version")
                api("io.ktor:ktor-client-json:$ktor_version")
                api("io.ktor:ktor-client-logging:$ktor_version")
                api("io.ktor:ktor-client-serialization:$ktor_version")
            }
        }
        commonTest {
            dependencies {
        		implementation kotlin('test-common')
        		implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')

                //Coroutines
                api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

                //serialization
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                api "io.ktor:ktor-client-json-jvm:$ktor_version"
                api "io.ktor:ktor-client-okhttp:$ktor_version"
                api "io.ktor:ktor-client-logging-jvm:$ktor_version"
                api "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                //Coroutines
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"

                //serialization
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                //ktor
                api "io.ktor:ktor-client-ios:$ktor_version"
                api "io.ktor:ktor-client-json-native:$ktor_version"
                api "io.ktor:ktor-client-serialization-native:$ktor_version"
                api "io.ktor:ktor-client-logging-native:$ktor_version"
            }

        }
        iosTest {
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}